<%
import json,MySQLdb as MDB
import os
from time import gmtime,strftime

conn = None

#
# Takes any object (preferably JSON, array, string) and
# sends out a response as a JSON file
#
def echo(text):
    req.write(json.dumps(text))

#
# creates a connection to the MySQL database
# and stores it in a global variable conn
#
def create_db_connection():
    global conn
    if not conn:
        host=""
        user=""
        password=""
        db=""
        try:
            conn = MDB.connect(host,user,password,db)
        except:
            echo({'error':"Failed to connect to the database"})

# calls function to establish connection
create_db_connection()

# execute if connection exists
if conn:
    # create cursor to access the data
    cursor = conn.cursor()

    #
    # Fetches all available categories by id and name
    # and returns the array of results
    #
    def PRIVATE_get_categories():
        global cursor
        query = "SELECT c.`category_id`, c.`name` "\
                "FROM `categories` c "\
                "ORDER BY c.`name` ASC"
        cursor.execute(query)
        rows = cursor.fetchall()
        return rows

    #
    # function to request all available categories in a JSON
    # 
    # Returns: 
    # {
    #   "categories": [<array of [<category_id>,<category_name>]]
    # }
    #
    def LF_get_categories():
        echo({'categories':PRIVATE_get_categories()})

    #
    # function that requests all available categories as well
    # as the 16 most recently offered products
    # 
    # Returns:
    # {
    #   "products": [<array of [<product_id>,<name>,<description>,<price>,<picture_path>]],
    #   "categories": [see LF_get_categories]
    # }
    #
    def LF_construct_main_page():
        global cursor
        query = "SELECT p.`product_id` ,p.`name`,p.`description`,sp.`price`,p.`picture_path` " \
                "FROM products p " \
                "INNER JOIN selling_products sp ON sp.product_id = p.product_id "\
                "WHERE sp.expire_date > NOW() "\
                "ORDER BY sp.create_date DESC " \
                "LIMIT 0, 16"
        cursor.execute(query)
        products = cursor.fetchall()
        categories = PRIVATE_get_categories()
        echo({'products': products, 'categories': categories})

    #
    # Searches for all products that have the form["product_name"] value
    # as part of the product name
    # 
    # Return:
    # similar to LF_construct_main_page 
    #
    def LF_search_product():
        global cursor
        if form.has_key("product_name"):
            if form['product_name']:
                name = form['product_name']
                query = "SELECT p.`product_id` ,p.`name`,p.`description`,sp.`price`,p.`picture_path` "\
                        "FROM products p "\
                        "INNER JOIN selling_products sp ON sp.product_id = p.product_id "\
                        "WHERE sp.expire_date > NOW() AND p.name LIKE ('%"+str(name)+"%') "\
                        "ORDER BY sp.price DESC "
                cursor.execute(query)
                rows = cursor.fetchall()
                categories = PRIVATE_get_categories()
                echo({'products':rows, 'categories': categories})
            else:
                echo({'error':"No product name for searching passed"})
        else:
            echo({'error':"No product name for searching passed"})

    #
    # Function to request user information depending on his/her id as form["id"]
    # 
    # Return:
    # {
    #   "user_info": [[<user_id>,<user_name>,<email>,<address>,<phone>]],
    #   "user_ranking": <avg_ranking>
    # }
    #
    def LF_get_user_information():
        global cursor
        if form.has_key("id"):
            if form['id']:
                query = "SELECT u.`user_id`, u.`email`, u.`address`, u.`phone` "\
                        "FROM users u "\
                        "WHERE u.user_id=" + str(form["id"])
                cursor.execute(query)
                rows = cursor.fetchall()
                query = "SELECT CAST(AVG(`rating`) AS CHAR) "\
                        "FROM user_review "\
                        "WHERE rated_id=" + str(form["id"])
                cursor.execute(query)
                rnk = cursor.fetchone()[0]
                echo({'user_info':rows, 'user_ranking': rnk})
            else:
                echo({'error':"No user id as 'id' passed"})
        else:
            echo({'error':"No user id as 'id' passed"})

    # 
    # Function to create a new user if form["email"], form["password"], form["address"], form["phone"]
    # exist and returns a JSON to store it at the client
    # 
    # Returns:
    # {
    #   "user_id": <user_id>,
    #   "email": <email>
    # }
    # 
    def LF_sign_up():
        global cursor,conn
        if form.has_key("email") and form.has_key("password") and form.has_key("address") and form.has_key("phone"):
            if form["email"] and form["password"] and form["address"] and form["phone"]:
                query = "SELECT `user_id` " \
                        "FROM `users` " \
                        "WHERE `email`='"+str(form['email'])+"'"

                cursor.execute(query)
                id = cursor.fetchone()

                if (id):
                    echo({'error':'User already exists'})
                else:
                    query = "INSERT INTO `users` (`email`,`password`,`address`,`phone`,`type`,`createtime`) VALUES "\
                            "('" + str(form["email"]) + "',MD5('" + str(form["password"]) + "'),'" + str(form["address"]) + "','" + str(form["phone"]) + "','regular',NOW())"
                    cursor.execute(query)
                    conn.commit()
                    query = "SELECT `user_id`, `email` "\
                            "FROM users "\
                            "WHERE email='" + str(form["email"]) + "' AND address='" + str(form["address"]) + "' AND phone='" + str(form["phone"]) + "'"
                    cursor.execute(query)
                    res = cursor.fetchone()
                    if res:
                        echo({'user_id':res[0],'email':res[1]})
                    else:
                        echo({'error':'Failed to create the user. Please try again later.'})
            else:
                echo({'error':"Not enough parameters"})
        else:
            echo({'error':"Not enough parameters"})

    # 
    # If user email and password are passed checks if thes correspond with the values in the database
    # and returns the user information to store on client side
    # 
    # Returns:
    # {
    #   "user_id": <user_id>,
    #   "email": <email>
    # }
    # 
    def LF_sign_in():
        if (form.has_key('user') and form.has_key('password')):
            if ['user'] and form['password']:
                user = form['user']
                passwd = form['password']
                query = "SELECT `user_id`, `email` " \
                        "FROM `users` " \
                        "WHERE `email`='"+str(user)+"' AND `password`=MD5('"+str(passwd)+"')"
                cursor.execute(query)
                id = cursor.fetchone()
                if id:
                    echo({"user_id":id[0],"email":id[1]})
                else:
                    echo({'error':'Invalid user or password'})
            else:
                echo({'error':'Invalid user or password'})
        else:
            echo({'error':'Invalid user or password'})

    # 
    # Checks if the keys: from, to, review, rating are available in the form variable and non empty
    # and creates then the review. If this was successful a JSON with success attribute is passed otherwise
    # an error attribute with the error message
    # 
    def LF_create_review():
        global cursor,conn
        if form.has_key("from") and form.has_key("to") and form.has_key("review") and form.has_key("rating"):
            if form["from"] and form["to"] and form["review"] and form["rating"]:
                query = "SELECT u.`user_id` "\
                        "FROM users u "\
                        "WHERE u.email = '" + str(form["to"]) + "'"
                cursor.execute(query)
                user = cursor.fetchone()
                if user:
                    query = "INSERT INTO `user_review` (`rater_id`,`rated_id`,`rating`,`comment`) VALUES "\
                            "(" + form["from"] + "," + str(user[0]) + "," + str(form["rating"]) + ",'" + str(form["review"]) + "');"
                    cursor.execute(query)
                    conn.commit()
                    echo({'success':"success"})
                else:
                    echo({'error':"There was an error while creating the review. Please try again later."})
            else:
                echo({'error':"Not enough parameters provided to create review"})
        else:
            echo({'error':"Not enough parameters provided to create review"})

    # 
    # If the keys name, description, price, id are part of the form variable and non-empty the product is updated
    # and the return is similar to LF_create_review
    # 
    def LF_edit_offer():
        global cursor,conn
        if form.has_key("name") and form.has_key("description") and form.has_key("price") and form.has_key("id"):
            if form['name'] and form['description'] and form['price'] and form['id']:
                query = "UPDATE `products` " \
                        "SET `name`='"+str(form['name'])+"', " \
                        "`description`='"+str(form['description'])+"'" \
                        "WHERE product_id="+str(form['id'])
                cursor.execute(query)

                query = "UPDATE selling_products "\
                        "SET price="+str(form['price'])+" "\
                        "WHERE product_id="+str(form['id'])
                cursor.execute(query)

                conn.commit()
                echo({'success':'success'})
            else:
                echo({'error':"Not enough parameters provided!"})
        else:
            echo({'error':"Not enough parameters provided!"})

    # 
    # If the keys name, description, price, user_id, category, picture are passed to the form variable and
    # non-empty the picture is first stored on the server and then the product created with the corresponding
    # picture path and the other information. The response (if successful) is a JSON with the product_id as attribtue
    # 
    # Returns:
    # {
    #   "product_id": <product_id>
    # }
    # 
    def LF_create_offer():
        global cursor,conn
        if form.has_key("name") and form.has_key("description") and form.has_key("price") and form.has_key("user_id") and form.has_key("category") and form.has_key('picture'):
            if form['name'] and form['description'] and form['price'] and form['user_id'] and form['category'] and form['picture']:
                picture_path = "img/products/"

                # creates filename string
                fileitem = form['picture']
                fname = form['user_id']+"_"+strftime("%d_%m_%Y_%H_%M_%S", gmtime())+".jpeg"

                # defines the directory path
                dir_path = os.path.join(os.path.dirname(req.filename), '../img/products')

                # opens destination file and writes the information from the uploaded picture
                open(os.path.join(dir_path, fname), 'wb').write(fileitem.file.read())
                picture_path=picture_path+fname
                query = "INSERT INTO `products` (`name`,`description`,`picture_path`) "\
                        "VALUES ('" + str(form["name"]) + "','" + str(form["description"]) + "','" + str(picture_path) + "');"
                cursor.execute(query)

                query = "SELECT p.`product_id` "\
                        "FROM products p "\
                        "WHERE p.name = '" + str(form["name"]) + "' "\
                        "AND p.description = '" + str(form["description"]) + "' "\
                        "AND p.picture_path = '" + str(picture_path) + "';"
                cursor.execute(query)

                product_id = cursor.fetchone()[0]
                query = "SELECT c.`category_id` "\
                        "FROM categories c "\
                        "WHERE UPPER(c.name) = UPPER('" + str(form["category"]) + "');"
                cursor.execute(query)
                category_id = cursor.fetchone()[0]
                query = "INSERT INTO `selling_products` (`user_id`, `product_id`, `price`, `create_date`, `expire_date`, `negotiable`) "\
                        "VALUES (" + str(form["user_id"]) + "," + str(product_id) + "," + str(form["price"]) + ",NOW(),DATE_ADD(NOW(), INTERVAL 1 MONTH),0);"
                cursor.execute(query)

                query = "INSERT INTO `product_to_category` (`product_id`,`category_id`) "\
                        "VALUES (" + str(product_id) + "," + str(category_id) + ");"
                cursor.execute(query)
                conn.commit()
                echo({'product_id':product_id})
            else:
                echo({'error':"Not enough parameters provided!"})

    # 
    # Function to request the product information depending on the form["id"] value as product_id.
    # 
    # Returns: 
    # {
    #   "product_info": [
    #                       <product_id>,
    #                       <name>,
    #                       <description>,
    #                       <picture_path>,
    #                       <price>,
    #                       <negotiable>,
    #                       <user_id>,
    #                       <email>,
    #                       <category_name>
    #                   ]
    # }
    # 
    def LF_get_product_info():
        global cursor
        if form.has_key("id"):
            if form['id']:
                query = "SELECT p.`product_id`, p.`name`, p.`description`, p.`picture_path`, s.`price`, s.`negotiable`, u.`user_id`, u.`email`, c.`name` "\
                        "FROM products p "\
                        "INNER JOIN selling_products s ON p.product_id = s.product_id "\
                        "INNER JOIN users u ON s.user_id = u.user_id "\
                        "INNER JOIN product_to_category ptc ON p.product_id = ptc.product_id "\
                        "INNER JOIN categories c ON ptc.category_id = c.category_id "\
                        "WHERE p.product_id = " + form["id"] + ";"
                cursor.execute(query)
                row = cursor.fetchone()
                if row:
                    echo({'product_info':row})
                else:
                    echo({'error':"No product with this id"})
            else:
                echo({'error':"No product id as 'id' provided"})
        else:
            echo({'error':"No product id as 'id' provided"})

    # 
    # Deletes the product and it's picture that correspond to form["product_id"] and returns a JSON with either a 
    # success attribute or an error attribute stating a message
    # 
    def LF_delete_product():
        global cursor,conn
        if form.has_key("user_id") and form.has_key("product_id"):
            if form['user_id'] and form['product_id']:
                query = "SELECT p.picture_path " \
                        "FROM selling_products sp " \
                        "INNER JOIN products p ON p.product_id=sp.product_id " \
                        "WHERE sp.product_id=" + str(form["product_id"])+" AND sp.user_id="+str(form['user_id'])
                cursor.execute(query)
                imgpath = cursor.fetchone()
                if (imgpath):
                    imgpath = '../'+imgpath[0]
                    dir_path = os.path.join(os.path.dirname(req.filename), imgpath)
                    if (os.path.isfile(dir_path)):
                        os.remove(dir_path)
                    query = "DELETE FROM products WHERE product_id="+str(form['product_id'])
                    cursor.execute(query)
                    conn.commit()
                    echo({'success':'success'})
                else:
                    echo({'error':"Product does not belong to user"})
            else:
                echo({'error':"No product_id as id provided!"})
        else:
            echo({'error':"No product_id as id provided!"})

    # 
    # Checks if the form["old_password"] corresponds to the value in the database and then updates
    # the password by setting the new one. If this was successful a "successs" string is returned otherwise
    # a JSON with an error attribute holding the error message.
    # 
    def LF_change_password():
        global cursor,conn
        if form.has_key("password") and form.has_key("id") and form.has_key("old_password"):
            if form['password'] and form['id'] and form["old_password"]:
                query = "SELECT user_id " \
                        "FROM users " \
                        "WHERE user_id="+str(form['id'])+" AND password=MD5('"+form['old_password']+"')"
                id = cursor.execute(query)
                if id:
                    query = "UPDATE users "\
                            "SET password=MD5('" + str(form["password"]) + "') "\
                            "WHERE user_id=" + str(form["id"]) + ";"
                    cursor.execute(query)
                    conn.commit()
                    echo("success")
                else:
                    echo({"error":"Invalid password"})
            else:
                echo({'error':"Not enough parameters provided"})
        else:
            echo({'error':"Not enough parameters provided"})

    #
    # Allows to filter the products by a certain min_price and max_price as well as a list of categories
    # and returns the list of products that fit this filter
    # 
    # Returns:
    # {
    #   "products": [<array of [<product_id>,<name>,<description>,<price>,<picture_path>]]
    # }
    #
    def LF_filter_products():
        global cursor
        if form.has_key("min_price") and form.has_key("max_price") and form.has_key("filter"):
            if form["min_price"] and form['max_price'] and form['filter']:
                if form['filter'] == "all":
                    query = "SELECT p.`product_id` ,p.`name`,p.`description`,sp.`price`,p.`picture_path` "\
                            "FROM products p "\
                            "INNER JOIN selling_products sp ON sp.product_id = p.product_id "\
                            "WHERE sp.expire_date > NOW() AND sp.price>="+form['min_price']+" AND sp.price<="+form['max_price']+" "\
                            "ORDER BY sp.price ASC"
                else:
                    if form.has_key("category_ids"):
                        query = "SELECT p.`product_id` ,p.`name`,p.`description`,sp.`price`,p.`picture_path` "\
                                "FROM products p "\
                                "INNER JOIN selling_products sp ON sp.product_id = p.product_id " \
                                "INNER JOIN product_to_category ptc ON ptc.product_id = p.product_id "\
                                "WHERE sp.expire_date > NOW() AND sp.price>="+form['min_price']+" AND sp.price<="+form['max_price']+" AND ptc.category_id IN ("+str(form['category_ids'])+") "\
                                "ORDER BY sp.price ASC"
                    else:
                        query = None
                if query:
                    cursor.execute(query)
                    rows = cursor.fetchall()
                    echo({"products":rows})
                else:
                    echo({"error":"Not enough parameters provided(3)"})
            else:
                echo({"error":"Not enough parameters provided(1)"})
        else:
            echo({"error":"Not enough parameters provided(2)"})

    # 
    # Function to request all products by the user with the user id -> form["user_id"]
    # 
    # Returns:
    # {
    #   "user_products": [<array of [
    #                       <product_id>,
    #                       <name>,
    #                       <description>,
    #                       <picture_path>,
    #                       <price>,
    #                       <negotiable>,
    #                       <user_id>,
    #                       <email>,
    #                       <category_name>
    #                       ]]
    # }
    # 
    def LF_get_user_products():
        global cursor
        if form.has_key("user_id"):
            if form['user_id']:
                query = "SELECT p.`product_id`, p.`name`, p.`description`, p.`picture_path`, s.`price`, s.`negotiable`, u.`user_id`, u.`email`, c.`name` "\
                        "FROM products p "\
                        "INNER JOIN selling_products s ON p.product_id = s.product_id "\
                        "INNER JOIN users u ON s.user_id = u.user_id "\
                        "INNER JOIN product_to_category ptc ON p.product_id = ptc.product_id "\
                        "INNER JOIN categories c ON ptc.category_id = c.category_id "\
                        "WHERE u.`user_id` = " + form["user_id"] + ";"
                cursor.execute(query)
                rows = cursor.fetchall()
                echo({'user_products':rows})
            else:
                echo({'error':'Not enough parameters provided'})
        else:
            echo({'error':'Not enough papameters provided'})

# part being responsible to call the correct function depending on the request
# reads the function parameter of the request and calls the function if available.
if form.has_key("function"):
    # creates function name depending on passed parameter
    funcName = "LF_" + form["function"]
    try:
        # checks if function exists
        func = locals()[funcName]
        if callable(func):
            try:
                # calls function
                func()      # depends on function, of course
            except:
                echo({'error':"Server encountered an error. Please try again later.(1)"})
    except:
        echo({'error':"Server encountered an error. Please try again later.(2)"})
else:
    echo({'error':"No database connection. Please try again later."})

